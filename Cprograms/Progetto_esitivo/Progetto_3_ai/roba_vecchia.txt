





SECONDO CICLO WHILE DI PARSE_EMERGENCY_TYPES CON DOPPIO PUNTATORE



while (fgets(line, sizeof(line), file) && current_type_idx < type_count) {
        line_num_pass2++;
        // Conserva una copia della riga originale per il logging degli errori
        char original_line_for_log[MAX_LINE_LENGTH];
        strncpy(original_line_for_log, line, MAX_LINE_LENGTH-1);
        original_line_for_log[MAX_LINE_LENGTH-1] = '\0';
        // Rimuovi newline dalla copia per il log, se presente
        if (strchr(original_line_for_log, '\n')) *strchr(original_line_for_log, '\n') = '\0';
        
        // Lavora su una copia per il parsing, per non alterare `line` con strtok se usata altrove
        char temp_line_for_parsing[MAX_LINE_LENGTH];
        strcpy(temp_line_for_parsing, line);
        char* current_line_ptr = temp_line_for_parsing; // Puntatore per scorrere la linea
        current_line_ptr[strcspn(current_line_ptr, "\n")] = 0; // Rimuovi newline
        trim_whitespace_pet(current_line_ptr); // Rimuovi spazi esterni


        if (*current_line_ptr == '\0' || current_line_ptr[0] == '#') { // Ignora righe vuote o commenti
            continue;   
        }

        // Variabili per contenere i dati estratti dalla riga
        char name_buffer[EMERGENCY_NAME_LENGTH];
        short priority_val;
        char rescuers_full_str[MAX_LINE_LENGTH] = ""; // Inizializza a stringa vuota

        // Parsing manuale più robusto della riga (invece di un singolo sscanf complesso)
        char *parser_ptr = current_line_ptr; // Puntatore ausiliario per il parsing

        // Estrai Nome Emergenza: "[<name>]"
        if (*parser_ptr != '[') { goto format_error_pet; } // Deve iniziare con '['
        parser_ptr++; // Salta '['
        char *name_end = strchr(parser_ptr, ']'); // Trova la ']' corrispondente
        // Controlli di validità per il nome
        if (!name_end || (name_end - parser_ptr) == 0 || (name_end - parser_ptr) >= EMERGENCY_NAME_LENGTH) { goto format_error_pet; }
        strncpy(name_buffer, parser_ptr, name_end - parser_ptr); // Copia il nome
        name_buffer[name_end - parser_ptr] = '\0'; // Null-termina
        parser_ptr = name_end + 1; // Avanza il puntatore dopo ']'

        // Estrai Priorità: "[<priority>]"
        while(isspace((unsigned char)*parser_ptr)) parser_ptr++; // Salta spazi intermedi
        if (*parser_ptr != '[') { goto format_error_pet; }
        parser_ptr++; // Salta '['
        char *prio_end = strchr(parser_ptr, ']'); // Trova la ']' corrispondente
        if (!prio_end) { goto format_error_pet; }
        char prio_str_buf[10]; // Buffer per la stringa della priorità
        if((prio_end - parser_ptr) == 0 || (prio_end - parser_ptr) >= sizeof(prio_str_buf)) { goto format_error_pet; } // Lunghezza valida
        strncpy(prio_str_buf, parser_ptr, prio_end - parser_ptr); // Copia la stringa della priorità
        prio_str_buf[prio_end - parser_ptr] = '\0'; // Null-termina
        if(sscanf(prio_str_buf, "%hd", &priority_val) != 1) { goto format_error_pet; } // Converte in short
        parser_ptr = prio_end + 1; // Avanza il puntatore
        
        // Estrai Stringa dei Soccorritori (tutto il resto della riga)
        while(isspace((unsigned char)*parser_ptr)) parser_ptr++; // Salta spazi
        if(*parser_ptr != '\0') { // Se c'è ancora qualcosa sulla riga
            strncpy(rescuers_full_str, parser_ptr, sizeof(rescuers_full_str)-1);
            rescuers_full_str[sizeof(rescuers_full_str)-1] = '\0'; // Assicura null-termination
        }

        // Validazione dei valori estratti
        if (priority_val < PRIORITY_LOW || priority_val > PRIORITY_HIGH) {
            sprintf(log_msg_buffer, "Riga %d: Priorità emergenza (%hd) non valida. Valori ammessi: %d, %d, %d. Riga: '%s'. Riga ignorata.", line_num_pass2, priority_val, PRIORITY_LOW, PRIORITY_MEDIUM, PRIORITY_HIGH, original_line_for_log);
            log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
            continue; // Ignora questa riga e passa alla successiva
        }
        if (strlen(rescuers_full_str) == 0) { // La specifica implica che ci siano sempre richieste
            sprintf(log_msg_buffer, "Riga %d: Lista soccorritori mancante per emergenza '%s'. Riga: '%s'. Riga ignorata.", line_num_pass2, name_buffer, original_line_for_log);
            log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
            continue; // Ignora questa riga
        }

        // --- Parsing della stringa dei soccorritori (`rescuers_full_str`) ---
        // Esempio: "Pompieri:1,5;Ambulanza:1,2;"
        int req_array_capacity = 5; // Capacità iniziale per l'array di richieste
        rescuer_request_t *requests_arr = malloc(req_array_capacity * sizeof(rescuer_request_t));
        if (!requests_arr) { // Se malloc fallisce
            sprintf(log_msg_buffer, "Riga %d: Fallimento allocazione memoria per richieste soccorritori (emergenza '%s'): %s. Parsing interrotto.", line_num_pass2, name_buffer, strerror(errno));
            log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
            goto error_cleanup_pet_fatal; // Errore fatale, esce dalla funzione
        }
        int actual_req_count = 0; // Contatore effettivo delle richieste valide per questa emergenza
        char *current_rescuer_token; // Puntatore al token corrente (es. "Pompieri:1,5")
        char *rest_of_rescuers_str = rescuers_full_str; // strtok_r modifica la stringa, quindi usa la copia
        char *saveptr_token; // Puntatore per strtok_r (thread-safe)

        // Divide la stringa `rescuers_full_str` usando ';' come delimitatore
        while ((current_rescuer_token = strtok_r(rest_of_rescuers_str, ";", &saveptr_token)) != NULL) {
            rest_of_rescuers_str = NULL; // Per le chiamate successive a strtok_r sulla stessa stringa
            trim_whitespace_pet(current_rescuer_token); // Pulisce il token
            if(strlen(current_rescuer_token) == 0) continue; // Ignora token vuoti (es. se c'è " ;; ")

            // Variabili per il token corrente
            char rt_name_buf[RESCUER_NAME_MAX_LEN];
            int num_needed_val, time_needed_val;

            // Parsa il token: "<rescuertype>:<number>,<time_in_secs>"
            if (sscanf(current_rescuer_token, "%[^:]:%d,%d", rt_name_buf, &num_needed_val, &time_needed_val) != 3) {
                sprintf(log_msg_buffer, "Riga %d, Emergenza '%s': Formato richiesta soccorritore non valido ('%s'). Richiesta ignorata.", line_num_pass2, name_buffer, current_rescuer_token);
                log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
                continue; // Ignora questa singola richiesta malformata, ma continua con le altre della stessa emergenza
            }
            trim_whitespace_pet(rt_name_buf); // Pulisce il nome del tipo di soccorritore estratto

            // Validazione dei dati della richiesta
            if (num_needed_val <= 0 || time_needed_val <= 0 || strlen(rt_name_buf) == 0) {
                sprintf(log_msg_buffer, "Riga %d, Emergenza '%s': Valori richiesta soccorritore non validi (num=%d, time=%d, nome='%s'). Richiesta ignorata.", line_num_pass2, name_buffer, num_needed_val, time_needed_val, rt_name_buf);
                log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
                continue; // Ignora
            }

            // Cerca il tipo di soccorritore nell'array dei tipi disponibili
            rescuer_type_t *found_rt = find_rescuer_type_in_array_pet(rt_name_buf, config);
            if (!found_rt) { // Se il tipo non esiste
                sprintf(log_msg_buffer, "Riga %d, Emergenza '%s': Tipo soccorritore '%s' non trovato nella configurazione dei soccorritori. Richiesta ignorata.", line_num_pass2, name_buffer, rt_name_buf);
                log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
                continue; // Ignora
            }

            // Se l'array `requests_arr` è pieno, rialloca per più spazio
            if (actual_req_count >= req_array_capacity) {
                req_array_capacity *= 2; // Raddoppia la capacità
                rescuer_request_t *temp_req_arr = realloc(requests_arr, req_array_capacity * sizeof(rescuer_request_t));
                if (!temp_req_arr) { // Se realloc fallisce
                    sprintf(log_msg_buffer, "Riga %d, Emergenza '%s': Fallimento riallocazione memoria per richieste soccorritori: %s. Parsing interrotto.", line_num_pass2, name_buffer, strerror(errno));
                    log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
                    free(requests_arr); // Libera l'array parzialmente popolato
                    goto error_cleanup_pet_fatal; // Errore fatale
                }
                requests_arr = temp_req_arr; // Aggiorna il puntatore all'array riallocato
            }
            // Popola la struttura rescuer_request_t
            requests_arr[actual_req_count].type = found_rt; // Puntatore al tipo di soccorritore trovato
            requests_arr[actual_req_count].required_count = num_needed_val;
            requests_arr[actual_req_count].time_to_manage = time_needed_val;
            actual_req_count++; // Incrementa il contatore delle richieste valide per questa emergenza
        } // Fine loop strtok_r per le richieste di soccorritori

        // Se, dopo aver processato la stringa dei soccorritori, non ne abbiamo trovata nessuna valida,
        // l'intera riga del tipo di emergenza viene considerata non valida.
        if (actual_req_count == 0) {
            sprintf(log_msg_buffer, "Riga %d: Nessuna richiesta soccorritore valida trovata per emergenza '%s' dalla stringa '%s'. Riga ignorata.", line_num_pass2, name_buffer, rescuers_full_str);
            log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
            free(requests_arr); // `requests_arr` era stato allocato, quindi va liberato
            continue; // Passa alla prossima riga del file
        }
        
        // --- Fine Parsing Stringa Soccorritori ---

        // Se tutto è andato bene finora, popola la struttura emergency_type_t
        emergency_type_t *current_et_ptr = &config->emergency_types_array[current_type_idx];
        
        current_et_ptr->emergency_desc = strdup(name_buffer); // Alloca memoria e copia il nome dell'emergenza
        if (!current_et_ptr->emergency_desc) { // Se strdup fallisce
            sprintf(log_msg_buffer, "Riga %d: Fallimento allocazione memoria per nome emergenza '%s': %s. Parsing interrotto.", line_num_pass2, name_buffer, strerror(errno));
            log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
            free(requests_arr); // Libera l'array di richieste per questa emergenza che non verrà aggiunta
            goto error_cleanup_pet_fatal; // Errore fatale
        }
        current_et_ptr->priority = priority_val;
        current_et_ptr->rescuers = requests_arr; // Assegna l'array di richieste (già allocato e popolato)
        current_et_ptr->rescuers_req_number = actual_req_count; // Numero di richieste valide

        // Log del tipo di emergenza estratto con successo
        sprintf(log_msg_buffer, "Riga %d: Estratta emergenza: Nome='%s', Priorità=%hd, N.Richieste Socc.=%d",
                line_num_pass2, current_et_ptr->emergency_desc, current_et_ptr->priority, current_et_ptr->rescuers_req_number);
        log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
        // Log dettagliato di ogni richiesta per questa emergenza (opzionale ma utile)
        for(int k=0; k < actual_req_count; ++k) {
            sprintf(log_msg_buffer, "    Richiesta %d: TipoSocc='%s', NumRichiesti=%d, TempoGestione=%d sec", k+1, requests_arr[k].type->rescuer_type_name, requests_arr[k].required_count, requests_arr[k].time_to_manage);
            log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
        }
        
        current_type_idx++; // Incrementa l'indice per il prossimo tipo di emergenza valido
        continue; // Passa alla prossima riga del file

    // Etichetta per errori di formato non fatali per il parsing dell'INTERO file, ma che invalidano la riga CORRENTE.
    format_error_pet:
        sprintf(log_msg_buffer, "Riga %d: Errore formato: '%s'. Riga ignorata.", line_num_pass2, original_line_for_log);
        log_message(LOG_EVENT_FILE_PARSING, filename, log_msg_buffer);
        // Non incrementare current_type_idx, semplicemente continua con la prossima riga del file.
        continue; 
    } // Fine loop while (fgets) per il secondo passaggio