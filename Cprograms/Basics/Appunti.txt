OPERAZIONI SU FILE:

1) OPEN: (-1)
        int descrittore = open(nomefile.txt, 0_RDONLY)

2) READ:
        char buffer[BUFFER_SIZE]
        while(byte_letti = read(descrittore, buffer, BUFFER_SIZE) > 0){
            ...
        }
        if (byte_letti == -1 ){errore;}

3) WRITE:
        char buffer[BUFFER_SIZE]
        while(...){
            write(STDOUT_FILENO, buffer, byte_letti)
        }

4) CLOSE: (-1)
        close(descrittore)

----------------------------------------------------------------------------

5) STAT: (-1)
        int risultato
        struct stat statfile
        risultato = stat(FILENAME, &statfile) 

6) OPENDIR: (NULL)
        DIR *directory
        directory = opendir(".") 

7) READDIR 
        struct dirent current
        while((corrente = readdir(directory)) != NULL){
                ... eventuale stampa ...
        }

8) CLOSEDIR (-1)
        closedir(directory)

-------------------------------------------------------------------------

9) FORK:
        pid_t pid;
        pid = fork(); ... -1

        pid == 0 -> FIGLIO
        else -> PADRE

10) EXECVP:
        char *args[] = {"/bin/ls", "-l", NULL}
        execvp(args[0], args)

11) EXECLP
        execlp("ls", "ls", "-l", NULL)

12) WAITPID (-1)
        ...
        figlio fa exec
        ...
        padre(pid):
        pid_t pid_risultato;
        int stato;
        pid_risultato = waitpid(pid, &stato, 0)
        if (WIFEXITED(stato)){
                .. stampa WIFEXITED(status)
        }

        (pid_risultato e pid corrispondono se tutto ok)

---------------------------------------------------------------------------

13) PIPE (-1)
        int pipe1[2];
        pipe(pipe1)

        close(pipe1[0])  --> chiude lato lettura
        close(pipe1[1])  --> chiude lato scrittura

14) SCRIVERE
        char msg[] = "Messaggio"
        write(pipe1[1], msg, strlen(msg))

15) LEGGERE
        char buffer[BUFFER_SIZE]
        read(pipe1[0], buffer, sizeof(buffer))

---------------------------------------------------------------

16) DUP2
        dup2(fd[1], STDOUT_FILENO)     --> Ciò che scriverebbe a schermo sto processo lo scrive su pipe
        ....
        dup2(fd[0], STDIN_FILENO)      --> Invece di leggere da stdin legge dalla pipe sto processo

        se faccio due exec e passo il risultato del primo al secondo è come fare:
        primo comando | secondo comando

---------------------------------------------------------------

17) MQ_OPEN (-1)
        mqd_t mq;
        struct mq_attr attr;

        attr.mq_flags = 0;
        attr.mq_maxmsg = 10;
        attr.mq_msgsize = 1024;
        attr.mq_curmsgs = 0;

        mq = mq_open(NOME_CON_/, O_CREAT | O_RDWR, 0644, &attr)
        
18) MQ_SEND (-1)
        mq_send(mq, "Messaggio iniziale", strlen("Messaggio iniziale")+1, 0);

19) MQ_RECIVE (-1)
        char buffer[BUFF_SIZE];
        mq_recive(mq, buffer, 1024, NULL)

20) MQ_CLOSE (-1)
        mq_close(mq)

21) MQ_UNLINK (-1)
        mq_unlink(NOME_CON_/)

------------------------------------------------------------------

22) SHM_OPEN (-1)
        int fd = shm_open(NOME_SM, O_CREAT | O_RDWR, 0600);

23) FTRUNCATE (-1)
        ftruncate(fd, SHM_SIZE);

24) MMAP (MAP_FAILED)
        void *ptr = mmap(NULL, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
        ... in ordine dove mettere (se null decide kernel), cosa si può fare, tipo, fd, offset

25) STRCPY
        strcpy((char *)ptr, "Ciao consumatore!");
        usata per scrivere in memoria condivisa ricastando

26) MUNMAP -> toglie mappatura in memoria
        munmap(ptr, MEM_SIZE);

27) SHM_UNLINK
        shm_unlink(NOME_SM);

28) CLOSE
        close(fd) -> devo chiudere sempre descrittore

----------------------------------------------------------------------------------

(SEM CON NOME)
29) SEM_OPEN (SEM_FAILED)
        sem_t *sem1 = sem_open("/nome", O_CREAT, 0600, 0);      -> se devo creare
        sem_t *sem1 = sem_open("/nome", 0);                     -> se c'è già

30) SEM_WAIT
        sem_wait(sem1);

31) SEM_POST
        sem_post(sem1);

32) SEM_CLOSE (-1)
        sem_close(sem1);

33) SEM_UNLINK (-1)
        sem_unlink("/nome")

-----------------------------------------------------------------------------------

(SEM SENZA NOME)
34) SEM_INIT (-1)
        sem_t *sem1;
        sem_init(*sem1, 1, val_iniziale) -> primo se è pshared

35) WAIT E POST -> uguali

36) SEM_DESTROY (-1)
        sem_destroy(&sem1);


-----------------------------------------------------------------------------------

(FUNZ DI SCRITTURA)
37) SPRINTF
        sprintf(message, "Messaggio n° %d", &val);

38) SNPRINTF
        snprintf(message, MAX_MSG_SIZE, "Messaggio n° %d", &val);
        //sennò su un buffer
        char buffer[DIM];
        snprintf(buffer, sizeof(buffer), "Messaggio %d", &num);

39) LETTURA E SALVATAGGIO
        fgets(message, MAX_MSG_SIZE, stdin);
        message[len - 1] = '\0'                 //presuppongo sia più piccolo di MAX_MSG_SIZE
        mq_send(mq, message, strlen(message) + 1, 0);


-------------------------------------------------------------------------------------

(GESTIONE SEGNALI)
38) SIGACTION (-1)
        #include <signal.h>

        struct sigaction sa;
        memset(&sa, 0, sizeof(sa));             //-> inizializzo
        sa. ...                                 //-> setto se voglio handler o sigaction
        sigemptyset(&sa.sa_mask)                //-> serve per inizializzare la mask a vuoto
        sa.sa_flags = ...                       //-> setto flags        
        int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)
        // -> signum = segnale da gestire
        // -> sigaction = azione da associare
        // -> oldact = dove si memorizza la configurazione dell'azione precedente

39) STRUCT SIGACTION
        
        struct sigaction{
                void (*sa_handler)(int);
                void (*sa_sigaction)(int, siginfo_t *, void*);
                sigset_t sa_mask;
                int sa_flags;
                void (sa_restorer)(void);
        }

        // -> sa_hanlder = gestore semplice con un parametro
        // -> sa_sigaction = gestore complesso utilizzabile se SA_SIGINFO in sa_flag è settato
        // -> sa_mask = i segnali che verranno bloccati nell'esecuzione del gestore
        // -> sa_flags = comportamento
        // -> sa_restorer = non usato

------------------------------------------------------------------------------------

(COMANDI UTILI DA TERMINALE)

40) PS
        ps -aux -> elenca processi

41) TOP 
        top -> gestione risorse
        htop -> uguale ma più organizzato

42) IFCONFIG
        ifconfig -> info su interfacce di rete

43) LSOF
        lsof -> lista dei descrittori aperti

44) DF
        df -h -> spazio disponibile

45) PROC 
        cd /proc/ -> file system virtuale, contiene info di sistema

-------------------------------------------------------------------------------------

(OPERAZIONI SU FILE ALTO LIVELLO)

46) FOPEN (NULL)
        FILE *file1;
        file1 = fopen("noemfile.txt", "r");

47) FREAD.
        char buffer[BUFFER_SIZE];
        size_t byte_letti = fread(buffer, 1, BUFFER_SIZE, file);
        if(byte_letti < BUFF_SIZE && ferror(file)){
                perror("...");
        }

48) FWRITE
        const char *msg = "Messaggio"
        size_t byte_scritti = fwrite(msg, 1, strlen(msg), file);
        if(byte_scritti < strlen(msg)){
                perror("Errore in scrittura");
        }

49) FCLOSE (-1)
        fclose(file);
